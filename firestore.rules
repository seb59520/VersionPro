rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUserAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function belongsToOrganization(organizationId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == organizationId;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isUserAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(userId) || isUserAdmin());
      allow delete: if isUserAdmin();
    }

    // Organizations collection
    match /organizations/{organizationId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if belongsToOrganization(organizationId);
      allow delete: if false;
    }

    // Stands collection
    match /stands/{standId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
        belongsToOrganization(request.resource.data.organizationId);
      allow update: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      allow delete: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId) &&
        isUserAdmin();
    }

    // Posters collection
    match /posters/{posterId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
        belongsToOrganization(request.resource.data.organizationId) &&
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId) &&
        (resource.data.userId == request.auth.uid || isUserAdmin());
      allow delete: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId) &&
        (resource.data.userId == request.auth.uid || isUserAdmin());
    }

    // Publications collection
    match /publications/{publicationId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
        belongsToOrganization(request.resource.data.organizationId) &&
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId) &&
        (resource.data.userId == request.auth.uid || isUserAdmin());
      allow delete: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId) &&
        (resource.data.userId == request.auth.uid || isUserAdmin());
    }

    // Maintenance collection
    match /maintenance/{maintenanceId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
        belongsToOrganization(request.resource.data.organizationId);
      allow update: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId);
      allow delete: if isAuthenticated() && 
        belongsToOrganization(resource.data.organizationId) &&
        isUserAdmin();
    }
  }
}
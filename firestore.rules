rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonctions utilitaires
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin(userId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(userId)) &&
        get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }
    
    function belongsToOrganization(organizationId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == organizationId;
    }

    // Collection Organizations
    match /organizations/{organizationId} {
      allow read: if true; // Allow public read access for domain-based routing
      allow create: if isAuthenticated();
      allow update: if belongsToOrganization(organizationId) && isAdmin(request.auth.uid);
      allow delete: if false;
    }

    // Collection Users
    match /users/{userId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == userId || 
        belongsToOrganization(resource.data.organizationId)
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == userId || 
        (belongsToOrganization(resource.data.organizationId) && isAdmin(request.auth.uid))
      );
      allow delete: if isAdmin(request.auth.uid);
    }

    // Collection Stands
    match /stands/{standId} {
      allow read: if true;
      allow create: if isAuthenticated() && belongsToOrganization(request.resource.data.organizationId);
      allow update: if isAuthenticated() && belongsToOrganization(resource.data.organizationId);
      allow delete: if isAuthenticated() && belongsToOrganization(resource.data.organizationId);
    }

    // Collection Publications
    match /publications/{publicationId} {
      allow read: if true;
      allow create: if isAuthenticated() && belongsToOrganization(request.resource.data.organizationId);
      allow update: if isAuthenticated() && belongsToOrganization(resource.data.organizationId);
      allow delete: if isAuthenticated() && belongsToOrganization(resource.data.organizationId);
    }

    // Collection Posters
    match /posters/{posterId} {
      allow read: if true;
      allow create: if isAuthenticated() && belongsToOrganization(request.resource.data.organizationId);
      allow update: if isAuthenticated() && belongsToOrganization(resource.data.organizationId);
      allow delete: if isAuthenticated() && belongsToOrganization(resource.data.organizationId);
    }

    // Collection Settings
    match /settings/{organizationId} {
      allow read: if true;
      allow write: if isAuthenticated() && belongsToOrganization(organizationId);
    }
  }
}